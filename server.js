const express = require('express');
const multer = require('multer');
const cors = require('cors');
const axios = require('axios');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

const upload = multer({ storage: multer.memoryStorage() });

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=' + GEMINI_API_KEY;

// In-memory storage (replace with DB in production)
let flaggedProfiles = {};
let reputations = {};

// Endpoint to submit a flag
app.post('/api/flag', upload.single('screenshot'), (req, res) => {
    const { profileUrl, content, reason } = req.body;
    const userId = "user123"; // Replace with real user authentication

    if (!flaggedProfiles[profileUrl]) flaggedProfiles[profileUrl] = [];
    flaggedProfiles[profileUrl].push({ userId, reason, timestamp: new Date(), content });

    reputations[profileUrl] = reputations[profileUrl] ? reputations[profileUrl] - 10 : 90;

    res.json({ message: "Flag submitted. Our team will review it.", flagged: true });
});

// Endpoint to fetch reputation score
app.get('/api/reputation', (req, res) => {
    const userId = "user123"; // Replace with real auth
    const score = reputations[userId] || 80;
    res.json({ reputation: score });
});

// Endpoint to fetch mentor tips generated by Gemini API
app.get('/api/mentor', async (req, res) => {
    const prompt = `
You are a career mentor helping users improve their networking and job searching on LinkedIn.  
Provide 4 actionable tips that are friendly and supportive.  
Focus on building trust, personalizing messages, and avoiding spammy behavior.
`;

    try {
        const payload = {
            contents: [{ parts: [{ text: prompt }] }],
            generationConfig: {
                temperature: 0.5,
                topP: 0.95,
                maxOutputTokens: 150
            }
        };

        const geminiResponse = await axios.post(GEMINI_URL, payload);
        const resultText = geminiResponse.data.candidates[0].content.parts[0].text.trim();

        res.json({ tips: resultText.split('\n').filter(line => line.trim() !== '') });
    } catch (error) {
        console.error("Gemini API error:", error.message);
        res.status(500).json({ message: "Failed to fetch mentor tips." });
    }
});

app.listen(3000, () => {
    console.log("Server running on port 3000");
});
